{"version":3,"sources":["components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/Search/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","cat","name","email","alt","src","id","CardList","cats","map","key","SearchBox","placeholder","onInputChange","type","onChange","App","state","searchField","fetch","then","response","json","users","x","user","username","setState","concat","this","filteredCats","filter","toLowerCase","includes","event","target","value","console","log","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2TAYeA,G,kBATF,SAACC,GACV,OACI,yBAAKC,UAAY,kBACb,4BAAKD,EAAME,IAAIC,MACf,+BAAKH,EAAME,IAAIE,MAAf,KACA,yBAAKC,IAAI,SAASC,IAAG,+BAA0BN,EAAME,IAAIK,GAApC,+BCQlBC,EAZE,SAACR,GACd,OACI,yBAAKC,UAAU,aACVD,EAAMS,KAAKC,KAAI,SAACR,GACf,OAAQ,kBAAC,EAAD,CAAMS,IAAKT,EAAIK,GAAIL,IAAOA,SCQjCU,G,MAbG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,cAC7B,OACI,6BACI,2BAAOb,UAAU,SACbc,KAAK,SACLF,YAAcA,EACdG,SAAUF,OCwCXG,E,kDAzCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXT,KAAK,GACLU,YAAY,IAJH,E,gEAOO,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,IAAIC,EAAID,EAAMd,KAAI,SAAAgB,GAChB,MAAQ,CAAEnB,GAAImB,EAAKnB,GAAK,GACtBJ,KAAK,WAAauB,EAAKvB,KACvBwB,SAAUD,EAAKC,SAAW,IAC1BvB,MAAOsB,EAAKtB,MAAQ,QAGxB,EAAKwB,SAAS,CAACnB,KAAKe,EAAMK,OAAOJ,U,+BAI9B,IAAD,SACwBK,KAAKZ,MAA3BT,EADF,EACEA,KAAMU,EADR,EACQA,YACRY,EAAetB,EAAKuB,QAAO,SAAA9B,GAAG,OAAIA,EAAIC,KAAK8B,cAAcC,SAASf,EAAYc,kBAOpF,OACE,yBAAKhC,UAAU,OACb,2CACA,kBAAC,EAAD,CAAWA,UAAU,SAASa,cAPZ,SAACqB,GACrB,EAAKP,SAAS,CAAET,YAAagB,EAAMC,OAAOC,OAASC,QAAQC,IAAIJ,EAAMC,OAAOC,SAMZxB,YAAc,qBAC3EkB,EAAaS,OAAS,EAAG,kBAAC,EAAD,CAAU/B,KAAQsB,IAAiB,8E,GApCnDU,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.af24dfce.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = (props) =>{\n    return(\n        <div className = 'card-container'>\n            <h2>{props.cat.name}</h2>\n            <p> {props.cat.email} </p>\n            <img alt=\"kitten\" src={`https://robohash.org/${props.cat.id}?set=set4&size=180x180`}></img>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport \"../CardList/card-list.styles.css\";\nimport Card from '../Card/Card.component'\n\nconst CardList = (props) => {\n    return(\n        <div className='card-list'>\n            {props.cats.map((cat) => {\n              return (<Card key={cat.id} cat = {cat}/>)\n            }\n            )}\n        </div>\n    )\n}\n\n\nexport default CardList;","import React from 'react'\nimport './search-box.styles.css'\n\nconst SearchBox = ({placeholder, onInputChange}) =>{\n    return(\n        <div>\n            <input className=\"search\"\n                type='search'\n                placeholder= {placeholder}\n                onChange={onInputChange}\n            >\n            </input>\n        </div>\n    )\n\n}\nexport default SearchBox","import React from 'react';\n\nimport './App.css';\nimport CardList from './components/CardList/CardList.component'\nimport SearchBox from './components/Search/SearchBox.component'\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      cats:[],\n      searchField:''\n    }; \n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then((users) => {\n        let x = users.map(user=>{\n          return ({ id: user.id + 10, \n            name:`Copy of ` + user.name, \n            username: user.username + \"2\", \n            email: user.email + \"2\"}\n            )\n        })\n        this.setState({cats:users.concat(x)})\n      })\n  }\n\n  render(){\n    const { cats, searchField } = this.state;\n    const filteredCats = cats.filter(cat => cat.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n    \n    const onInputChange = (event) => {\n      this.setState({ searchField: event.target.value }, console.log(event.target.value))\n    }\n  \n    return (\n      <div className=\"App\">\n        <h1>Cat Rolodex</h1>\n        <SearchBox className=\"search\" onInputChange = {onInputChange} placeholder = \"Search Directory\"/>\n        {filteredCats.length > 0? <CardList cats = {filteredCats}/> :<h4>Sorry we dont have anyone by that name...</h4> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}